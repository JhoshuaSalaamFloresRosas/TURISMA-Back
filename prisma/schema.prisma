// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(120)
  password  String   @db.VarChar(120)
  firstName String   @db.VarChar(120)
  phone     String   @db.VarChar(20)
  email     String   @db.VarChar(120) @unique
  admin     Boolean   @default(false)
  userPhoto String?  @db.Text
  reservations Reservation[]
}

model Reservation {
  id          Int          @id @default(autoincrement())
  users        User         @relation(fields: [user], references: [id])
  user      Int
  excursions   Excursion    @relation(fields: [excursion], references: [id])
  excursion Int
  date        DateTime @default(now())
  sitNumber String       @db.VarChar(50)
  paymentId   Payment     @relation(fields: [payment], references: [id])
  payment   Int
  statusReserv StatusReserv
  
}

model Excursion {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(120)
  departureDate DateTime
  arrivalDate   DateTime?
  price         Int?
  transportId     Transport?  @relation(fields: [transport], references: [id])
  transport     Int?
  outPoint      String?     @db.VarChar(200)
  sitApart      Int?
  status        StatusExcur


  reservations  Reservation[]
  stopPoints    StopPoint[]
  photos        Photo[]
}

model StopPoint {
  id          Int        @id @default(autoincrement())
  excursionId  Excursion  @relation(fields: [excursion], references: [id])
  excursion Int
  name        String     @db.VarChar(200)
  numStop     Int
  duration    String     @db.VarChar(200)


  activities  Activity[]
}

model Activity {
  id          Int        @id @default(autoincrement())
  stopPointId   StopPoint  @relation(fields: [stopPoint], references: [id])
  stopPoint Int
  name        String     @db.VarChar(200)
  numActivity Int
  description String     @db.Text
  
}

model Payment {
  id          Int        @id @default(autoincrement())
  reservation Reservation[]
  date        DateTime @default(now())
  totalCost   Int
  alreadyPay Int?
  partialPay  Boolean?
  status      Boolean

  
}

model Transport {
  id         Int        @id @default(autoincrement())
  brand      String     @db.VarChar(120)
  model      String     @db.VarChar(120)
  type       String     @db.VarChar(120)
  capacity   Int

  excursions Excursion[]
}

model Photo {
  id          Int        @id @default(autoincrement())
  excursionId   Excursion  @relation(fields: [excursion], references: [id])
  excursion Int
  imageUrl    String     @db.VarChar(200)

  
}

enum StatusReserv {
  COMPLETE
  CANCELED
  PENDING
}

enum StatusExcur {
  PROCESS
  FINISHED
  CANCELED
  PENDING
}